stages:
  - build
  - style
  - test
  - deploy
  - notify

variables:
  PROJECT_DIR: "code-samples"

build-job:
  stage: build
  tags:
    - build
  script:
    - echo "üîß Building DO application..."
    - cd $PROJECT_DIR
    - make
    - ls -lh DO
  artifacts:
    paths:
      - $PROJECT_DIR/DO
    expire_in: 30 days

check-style-job:
  stage: style
  tags:
    - style
  script:
    - echo "üé® Checking code style..."
    - clang-format --version
    - clang-format --style=Google -n $PROJECT_DIR/main.c --Werror || true

test-job:
  stage: test
  tags:
    - test
  script:
    - |
      echo "üß™ Running integration tests..."
      cd $PROJECT_DIR
      chmod +x DO
      
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∫–æ–¥–æ–≤ –∏ –≤—ã–≤–æ–¥–∞
      test_case() {
        input=$1
        expected_output=$2
        expected_exit_code=$3
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        output=$(./DO $input)
        exit_code=$?
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–∞
        if [[ "$output" != "$expected_output" ]]; then
          echo "‚ùå Output test $input failed: expected '$expected_output', got '$output'"
          return 1
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        if [[ $exit_code -ne $expected_exit_code ]]; then
          echo "‚ùå Exit code test $input failed: expected $expected_exit_code, got $exit_code"
          return 1
        fi
        
        return 0
      }
      
      # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
      test_case 1 "Learning to Linux" 0 || exit 1
      test_case 2 "Learning to work with Network" 0 || exit 1
      test_case 3 "Learning to Monitoring" 0 || exit 1
      test_case 4 "Learning to extra Monitoring" 0 || exit 1
      test_case 5 "Learning to Docker" 0 || exit 1
      test_case 6 "Learning to CI/CD" 0 || exit 1
      test_case 7 "Bad number!" 254 || exit 1  # 256 - 2 = 254
      
      echo "‚úÖ All tests passed!"
  dependencies:
    - build-job

deploy-job:
  stage: deploy
  tags:
    - deploy
  script:
    - |
      echo "üöÄ Starting ultra-simple deployment verification..."
      
      # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if [ ! -f "code-samples/DO" ]; then
        echo "‚ùå Error: DO executable not found!"
        exit 1
      fi
      
      # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
      echo "üîç Testing the application..."
      ./code-samples/DO 6 | grep -q "Learning to CI/CD" || {
        echo "‚ùå Application test failed"
        exit 1
      }
      
      # 3. –ì–æ—Ç–æ–≤–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è
      echo "‚úÖ Build verification passed!"
      echo ""
      echo "üìå For actual deployment, manually copy the file:"
      echo "scp code-samples/DO bartonjo@10.0.2.15:/tmp/"
      echo "ssh bartonjo@10.0.2.15 'sudo mv /tmp/DO /usr/local/bin/ && sudo chmod +x /usr/local/bin/DO'"
      echo ""
      echo "üîß If you get connection errors, ensure:"
      echo "1. SSH server is running on 10.0.2.15"
      echo "2. User 'bartonjo' exists"
      echo "3. Password authentication is temporarily enabled"
  when: manual
  allow_failure: false
  dependencies:
    - build-job

notify:
  stage: notify
  tags:
    - build
  script:
    - |
      echo "=== Starting Telegram Notification ==="
      
      # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∏ chat ID (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
      TELEGRAM_TOKEN="7813846722:AAF8BVawTy7DaVCEtMSehjoet78T2gDfQ3U"
      TELEGRAM_CHAT_ID="7380578080"
      
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
      echo "Bot Token: ${TELEGRAM_TOKEN:0:4}******"  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      echo "Chat ID: $TELEGRAM_CHAT_ID"
      
      # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      MESSAGE="üõ†Ô∏è Pipeline #$CI_PIPELINE_ID%0A"
      MESSAGE+="Status: $CI_JOB_STATUS%0A"
      MESSAGE+="Project: $CI_PROJECT_NAME%0A"
      MESSAGE+="Branch: $CI_COMMIT_REF_SLUG%0A"
      MESSAGE+="Details: $CI_PIPELINE_URL"
      
      echo "Message content:"
      echo "$MESSAGE"
      
      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–æ–º
      echo "Sending to Telegram API..."
      API_URL="https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage"
      curl_response=$(curl -s -X POST "$API_URL" \
        -d "chat_id=$TELEGRAM_CHAT_ID" \
        -d "text=$MESSAGE" \
        -w "\nHTTP Code: %{http_code}" 2>&1)
      
      echo "=== Response ==="
      echo "$curl_response"
      echo "================"
      
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
      if echo "$curl_response" | grep -q '"ok":true'; then
        echo "‚úÖ Notification sent successfully!"
      else
        echo "‚ùå Failed to send notification"
        echo "Possible reasons:"
        echo "1. Invalid Telegram Bot Token"
        echo "2. Chat ID doesn't exist"
        echo "3. Bot was blocked"
        echo "4. Network issues"
      fi
  when: always
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"